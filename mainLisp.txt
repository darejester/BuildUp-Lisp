(defun game (x)
    (cond 
        ((= x 0) 
            (print "start new tournament")
            (generate_dominos)
        )
        ((= x 1) 
            (print "resume old tournament")
            (read_from_file)
        )
        (t "wrong input. Validate")
    )
)
;
(defun generate_dominos ()  
    ;put all in let function
    (let(
            
            (x (shuffle(generate_boneyard)))
        )
        (print "generate boneyard for players")
        x
    )
    
    
)
;(generate_dominos)
;
(defun generate_boneyard ()  
    ;generate dominos
    '(
    (0 0) (0 1) (0 2) (0 3) (0 4) (0 5) (0 6)
          (1 1) (1 2) (1 3) (1 4) (1 5) (1 6)
                (2 2) (2 3) (2 4) (2 5) (2 6)
                      (3 3) (3 4) (3 5) (3 6)
                            (4 4) (4 5) (4 6)
                                  (5 5) (5 6)
                                        (6 6)
    )
)
;(generate_boneyard)
;
(defun shuffle (a_list)  
    ;generate dominos
    (sort a_list #'(lambda (a b) (random 2)))
)
;(shuffle)
;
(defun read_from_file ()  
    (print "extract stack for players")
    (print "extract boneyard for players")
    (print "extract hand of players")
    (print "extract score and rounds")
    nil
)
;(read_from_file)
;
(defun tournament ()
    (print "starting tournament")
    nil
)
;(tournament)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ask user for input
(format nil "0 : Start New Tournament ~% 1 : Resume Old Tournament")
(game (read))
