(defun generate_boneyard ()  
    '(
    (0 0) (0 1) (0 2) (0 3) (0 4) (0 5) (0 6)
          (1 1) (1 2) (1 3) (1 4) (1 5) (1 6)
                (2 2) (2 3) (2 4) (2 5) (2 6)
                      (3 3) (3 4) (3 5) (3 6)
                            (4 4) (4 5) (4 6)
                                  (5 5) (5 6)
                                        (6 6)
    )
)
(generate_boneyard)
;
(defun total (a_domino)  
   (+ (nth 1 a_domino) (nth 2 a_domino))
)
;(total '(2 3))
;
(defun get_color (a_domino)  
   (nth 0 a_domino)
)
;(total '(2 3))
;
(defun shuffle (a_values)  
    ;(print (total (nth 0 (nth 1 (nth 0 a_values)))))
    ;(print (total (nth 0 (nth 1 (nth 1 a_values)))))
    (cond
        ((and (null(get_player_hand a_values)) (null (get_bot_hand a_values)))
            (cond
                (
                    (= (total (nth 0 (nth 1 (nth 0 a_values)))) (total (nth 0 (nth 1 (nth 1 a_values)))))
                        (progn
                            (print "shuffle")            
                            (let
                                (
                                    (m_values
                                        (list
                                            (list
                                                (nth 0 (nth 0 a_values))
                                                (sort (copy-list (nth 1 (nth 0 a_values))) #'(lambda (a b) (< (random 2) 1)))
                                                (nth 2 (nth 0 a_values))
                                                (nth 3 (nth 0 a_values))
                                                (nth 4 (nth 0 a_values))
                                            )
                                            (list
                                                (nth 0 (nth 1 a_values))
                                                (sort (copy-list (nth 1 (nth 1 a_values))) #'(lambda (a b) (< (random 2) 1)))
                                                (nth 2 (nth 1 a_values))
                                                (nth 3 (nth 1 a_values))
                                                (nth 4 (nth 1 a_values))
                                            )
                                            (nth 2 a_values)
                                            
                                        )
                                    )
                                )
                                (shuffle m_values)
                                ;(print m_values)
                            )   
                        )
                )
                (
                    (not (= (total (nth 0 (nth 1 (nth 0 a_values)))) (total (nth 0 (nth 1 (nth 1 a_values))))))
                        (progn
                            (print "no need to shuffle")
                            a_values
                        )
                    
                )
                (t (print "ERROR"))
            )
        )
        ((not (and (null(get_player_hand a_values)) (null (get_bot_hand a_values))))
            (progn
                (print "no need to shuffle")
                a_values
            )
        )
    )
    
)
;(shuffle)
;
(defun generate_values ()  
    ;put all in let function
    (print "generate values")
    (let(
            (m_values
                (list
                    (list
                        ()
                        ;(generate_boneyard)
                        (mapcar (lambda (sublist) (cons "W" sublist)) (generate_boneyard))
                        ()
                        0
                        0
                    )
                    (list
                        ()
                        ;(generate_boneyard)
                        (mapcar (lambda (sublist) (cons "B" sublist)) (generate_boneyard))
                        ()
                        0
                        0
                    )
                )
            )
        )
        m_values
        ;(print m_values)
    )
)
(generate_values)
;
(defun generate_values_cont (a_values)  
    ;put all in let function
    (print "generate values cont")
    (let(
            (m_values
                (list
                    (list
                        ()
                        ;(generate_boneyard)
                        (mapcar (lambda (sublist) (cons "W" sublist)) (generate_boneyard))
                        ()
                        0
                        (nth 4 (nth 0 a_values))
                    )
                    (list
                        ()
                        ;(generate_boneyard)
                        (mapcar (lambda (sublist) (cons "B" sublist)) (generate_boneyard))
                        ()
                        0
                        (nth 4 (nth 1 a_values))
                    )
                )
            )
        )
        m_values
        ;(print m_values)
    )
)
;(generate_values_cont)
;
(defun check_first (a_values)  
    ;put all in let function
    (print "check first")
    ;(print a_values)
    (cond
        (
            (null(nth 2 a_values))
                (progn
                    ;(print "decide who goes first")
                    (cond
                        (
                            (> (total (nth 0 (nth 1 (nth 0 a_values)))) (total (nth 0 (nth 1 (nth 1 a_values)))))
                                (progn
                                    (let
                                        (
                                            (m_values
                                                (list
                                                    (list
                                                        (nth 0 (nth 0 a_values))
                                                        (nth 1 (nth 0 a_values))
                                                        (nth 2 (nth 0 a_values))
                                                        (nth 3 (nth 0 a_values))
                                                        (nth 4 (nth 0 a_values))
                                                    )
                                                    (list
                                                        (nth 0 (nth 1 a_values))
                                                        (nth 1 (nth 1 a_values))
                                                        (nth 2 (nth 1 a_values))
                                                        (nth 3 (nth 1 a_values))
                                                        (nth 4 (nth 1 a_values))
                                                    )
                                                    "COMPUTER"
                                                )
                                            )
                                        )
                                        ;(print m_values)
                                        m_values
                                    )   
                                
                                )
                        )
                        (
                            (< (total (nth 0 (nth 1 (nth 0 a_values)))) (total (nth 0 (nth 1 (nth 1 a_values)))))
                                (progn
                                    (let
                                        (
                                            (m_values
                                                (list
                                                    (list
                                                        (nth 0 (nth 0 a_values))
                                                        (nth 1 (nth 0 a_values))
                                                        (nth 2 (nth 0 a_values))
                                                        (nth 3 (nth 0 a_values))
                                                        (nth 4 (nth 0 a_values))
                                                    )
                                                    (list
                                                        (nth 0 (nth 1 a_values))
                                                        (nth 1 (nth 1 a_values))
                                                        (nth 2 (nth 1 a_values))
                                                        (nth 3 (nth 1 a_values))
                                                        (nth 4 (nth 1 a_values))
                                                    )
                                                    "HUMAN"
                                                )
                                            )
                                        )
                                        ;(print m_values)
                                        m_values
                                    )   
                                
                                )
                        )
                        (t "ERROR")
                    )
                    
                )
            
        )
        (
            (not (null(nth 2 a_values)))
                (progn
                    (print "no need to decide")
                    a_values
                )
        )
        (t "ERROR")
    )
)
;(check_first)
;
(defun set_stacks (a_values)
    (print "set_stacks")
    (cond
        ((and (null (nth 0 (nth 0 a_values))) (null (nth 0 (nth 1 a_values))))
            (let
                (
                    (m_values
                        (list
                            (list
                                (subseq (nth 1 (nth 0 a_values))0 6)
                                (subseq (nth 1 (nth 0 a_values))6)
                                (nth 2 (nth 0 a_values))
                                (nth 3 (nth 0 a_values))
                                (nth 4 (nth 0 a_values))
                            )
                            (list
                                (subseq (nth 1 (nth 1 a_values))0 6)
                                (subseq (nth 1 (nth 1 a_values))6)
                                (nth 2 (nth 1 a_values))
                                (nth 3 (nth 1 a_values))
                                (nth 4 (nth 1 a_values))
                            )
                            (nth 2 a_values)
                        )
                        
                    )
                )
                m_values
            )
        )
        ((not (and (null (nth 0 (nth 0 a_values))) (null (nth 0 (nth 1 a_values)))))
            (print "no need to set stacks")
            a_values
        )
    )
    
)
;(set_stacks)
;
(defun draw (a_values)
    ;put all in let function
    (print "draw")
    ;(print a_values)
    (cond
        ((and (null (get_bot_hand a_values)) (null (get_player_hand a_values)))
            (cond 
                (
                    (> (length (nth 1(nth 0 a_values))) 6)
                        (let
                            (
                                (m_values
                                    (list
                                        (list
                                            (nth 0 (nth 0 a_values))
                                            (subseq (nth 1 (nth 0 a_values))6)
                                            (subseq (nth 1 (nth 0 a_values))0 6)
                                            (nth 3 (nth 0 a_values))
                                            (nth 4 (nth 0 a_values))
                                        )
                                        (list
                                            (nth 0 (nth 1 a_values))
                                            (subseq (nth 1 (nth 1 a_values))6)
                                            (subseq (nth 1 (nth 1 a_values))0 6)
                                            (nth 3 (nth 1 a_values))
                                            (nth 4 (nth 1 a_values))
                                        )
                                        (nth 2 a_values)
                                    )
                                    
                                )
                            )
                            ;(print m_values)
                            m_values
                        )
                )
                (
                    (< (length (nth 1(nth 0 a_values))) 6) 
                        (let
                            (
                                (m_values
                                    (list
                                        (list
                                            (nth 0 (nth 0 a_values))
                                            (subseq (nth 1 (nth 0 a_values))6)
                                            (subseq (nth 1 (nth 0 a_values))0 4)
                                            (nth 3 (nth 0 a_values))
                                            (nth 4 (nth 0 a_values))
                                        )
                                        (list
                                            (nth 0 (nth 1 a_values))
                                            (subseq (nth 1 (nth 1 a_values))6)
                                            (subseq (nth 1 (nth 1 a_values))0 4)
                                            (nth 3 (nth 1 a_values))
                                            (nth 4 (nth 1 a_values))
                                        )
                                        (nth 2 a_values)
                                    )
                                )
                            )
                            ;(print m_values)
                            m_values
                        )
                )
                (t "ERROR")
            )
        )
        ((not(and (null (get_bot_hand a_values)) (null (get_player_hand a_values))))
            (print "no need to draw")
            a_values
        )
    )
    
)
;(draw)
;
(defun get_player_boneyard(a_values)
    (nth 1 (nth 1 a_values))
)
;(get_player_boneyard)
;
(defun get_player_hand(a_values)
    (nth 2 (nth 1 a_values))
)
;(get_player_hand)
;
(defun get_bot_boneyard(a_values)
    (nth 1 (nth 0 a_values))
)
;(get_bot_boneyard)
;
(defun get_bot_hand(a_values)
    (nth 2 (nth 0 a_values))
)
;(get_bot_hand)
;
(defun get_first_player(a_values)
    (nth 2 a_values)
)
;(get_first_player)
;
(defun get_stack(a_values)
    (append (nth 0(nth 0 a_values)) (nth 0 (nth 1 a_values)))
)
;(get_stack)
;
(defun update_hand(a_hand a_index)
    (append (subseq a_hand 0 a_index)(subseq a_hand (1+ a_index)))
)
;(update_hand)
;
(defun get_bot_score(a_values)
    (nth 3 (nth 0 a_values))
)
;(get_bot_score)
;
(defun get_player_score(a_values)
    (nth 3 (nth 1 a_values))
)
;(get_player_score)
;
(defun get_bot_tournament_score(a_values)
    (nth 4 (nth 0 a_values))
)
;(get_player_score)
;
(defun get_player_tournament_score(a_values)
    (nth 4 (nth 1 a_values))
)
;(get_player_score)
;
(defun update_stack(a_stack a_hand a_stack_index a_hand_index)
    ;(append (subseq a_stack 0 a_stack_index)(list (nth a_hand_index a_hand))(subseq a_stack a_stack_index))
    (append
        (append 
            (subseq a_stack 0 a_stack_index)(list(nth a_hand_index a_hand))
        )
        (subseq a_stack (1+ a_stack_index))
    )
    
)
;(update_stack)
;
(defun display_board(a_values)
        (print "BOT TOURNAMENT SCORE")
        (print (nth 4 (nth 0 a_values)))
        (print "BOT ROUND SCORE")
        (print (nth 3 (nth 0 a_values)))
        (terpri)
        (print "BOT BONEYARD")
        (print (nth 1 (nth 0 a_values)))
        (print "BOT HAND ")
        (print (nth 2 (nth 0 a_values)))
        (terpri)
        (print "STACKS")
        (print (nth 0 (nth 0 a_values)))
        (print (nth 0 (nth 1 a_values)))
        (terpri)
        (print "PLAYER HAND")
        (print (nth 2 (nth 1 a_values)))
        (print "PLAYER BONEYARD")
        (print (nth 1 (nth 1 a_values)))
        (terpri)
        (print "PLAYER ROUND SCORE")
        (print (nth 3 (nth 1 a_values)))
        (print "PLAYER TOURNAMENT SCORE")
        (print (nth 4 (nth 1 a_values)))
)
;(display_board)
;
(defun check_double_tile (a_domino)
    (cond
        ((= (nth 1 a_domino) (nth 2 a_domino))
            1
        )
        ((not (= (nth 1 a_domino) (nth 2 a_domino)))
            0
        )
        (t "ERROR")
    )
)
;(check_double_tile)
;
(defun check_valid_move (a_hand_domino a_stack_domino)
    (print "check_valid_move")
    ;(print a_hand_domino)
    ;(print (check_double_tile a_hand_domino))
    (cond
        ((and (= (check_double_tile a_hand_domino) 0) (>= (total a_hand_domino) (total a_stack_domino)))
            (print "condition 1")
            1
        )
        ((and (= (check_double_tile a_hand_domino) 1) (= (check_double_tile a_stack_domino) 0))
            (print "condition 2")
            1
        )
        ((and (> (total a_hand_domino) (total a_stack_domino)) (and (= (check_double_tile a_hand_domino) 1) (= (check_double_tile a_stack_domino) 0)))
            (print "condition 3")
            1
        )
        ((< (total a_hand_domino) (total a_stack_domino))
            (print "NOT VALID MOVE")
            0
        )
    )
)
;(check_valid_move)
;
(defun player_play(a_values)
    (print "play")
    ;(print a_values)
    (display_board a_values)
    (print "Enter the index of the domino in hand that you want to play")
    (print "Enter the index of the stack that you want to place on")
    (let*
        (
            (m_hand_index
                (read)
            )
            (m_stack_index
                (read)
            )
            (m_updated_stack
                (update_stack (get_stack a_values) (get_player_hand a_values) m_stack_index m_hand_index)
                
            )
            (m_valid_move
                (check_valid_move (nth m_hand_index (get_player_hand a_values)) (nth m_stack_index (get_stack a_values)))
            )
            (m_values
                (cond
                    ((= m_valid_move 0)
                        (print "recurse")
                        (player_play a_values)
                    )
                    ((= m_valid_move 1)
                        (list
                            (list
                                ;(nth 0 (nth 0 a_values))
                                (subseq m_updated_stack 0 6)
                                (nth 1 (nth 0 a_values))
                                (nth 2 (nth 0 a_values))
                                (nth 3 (nth 0 a_values))
                                (nth 4 (nth 0 a_values))
                            )
                            (list
                                ;(nth 0 (nth 1 a_values))
                                (subseq m_updated_stack 6 12)
                                (nth 1 (nth 1 a_values))
                                ;(cdr(nth 2 (nth 1 a_values)))
                                (update_hand (get_player_hand a_values) m_hand_index)
                                (nth 3 (nth 1 a_values))
                                (nth 4 (nth 1 a_values))
                            )
                            "COMPUTER"
                        )
                    )
                )
                
            )
        )
        ;(print (nth m_hand_index (get_player_hand a_values)))
        ;(print (nth m_stack_index (get_stack a_values)))
        ;(print m_updated_stack)
        
        m_values
    )
)
;(player_play)
;
(defun bot_play(a_values)
    (print "play")
    ;(print a_values)
    (display_board a_values)
    (let
        (
            (m_values
                (list
                    (list
                        (nth 0 (nth 0 a_values))
                        (nth 1 (nth 0 a_values))
                        (cdr(nth 2 (nth 0 a_values)))
                        (nth 3 (nth 0 a_values))
                        (nth 4 (nth 0 a_values))
                    )
                    (list
                        (nth 0 (nth 1 a_values))
                        (nth 1 (nth 1 a_values))
                        (nth 2 (nth 1 a_values))
                        (nth 3 (nth 1 a_values))
                        (nth 4 (nth 1 a_values))
                    )
                    "HUMAN"
                )
            )
        )
        
        m_values
    )
)
;(bot_play)
;
(defun score (a_stack a_color) 
    (print "score")
    (cond
        ((string= a_color "W")
            (print "white")
            (cond
                ((string= (get_color (car a_stack)) a_color)
                    (+ (total (car a_stack)) (score (cdr a_stack) a_color))
                )
                ((string= (get_color (car a_stack)) "B")
                    (score (cdr a_stack) a_color)
                )
                ((null a_stack)
                    0
                )
                (t "ERROR")
            )
        )
        ((string= a_color "B")
            (print "black")
            (cond
                ((string= (get_color (car a_stack)) a_color)
                    (+ (total (car a_stack)) (score (cdr a_stack) a_color))
                )
                ((string= (get_color (car a_stack)) "W")
                    (score (cdr a_stack) a_color)
                )
                ((null a_stack)
                    0
                )
                (t "ERROR")
            )
        )
        (t "ERROR")
    )

)
;(score)
;
(defun update_round_score (a_values)
    (print "update_round_score")
    (let
        (
            (m_values
                (list
                    (list
                        (nth 0 (nth 0 a_values))
                        (nth 1 (nth 0 a_values))
                        (nth 2 (nth 0 a_values))
                        (+ (get_bot_score a_values)(score (get_stack a_values) "W"))
                        (nth 4 (nth 0 a_values))
                    )
                    (list
                        (nth 0 (nth 1 a_values))
                        (nth 1 (nth 1 a_values))
                        (nth 2 (nth 1 a_values))
                        (+ (get_player_score a_values)(score (get_stack a_values) "B"))
                        (nth 4 (nth 1 a_values))
                    )
                    "HUMAN"
                )
            )
        )
        
        m_values
    )
)
;(update_round_score)
;
(defun update_tournament_score (a_values)
    (print "update_tournament_score")
    (print (get_bot_score a_values))
    (print (get_player_score a_values))
    (let*
        (
            (m_bot_tournament_score
                (cond
                    ((> (get_bot_score a_values) (get_player_score a_values))
                        (+ (get_bot_tournament_score a_values) 1)
                    )
                    ((= (get_bot_score a_values) (get_player_score a_values))
                        (+ (get_bot_tournament_score a_values) 1)
                    )
                    ((< (get_bot_score a_values) (get_player_score a_values))
                        (get_bot_tournament_score a_values)
                    )
                    (t "ERROR")
                )
            )
            (m_player_tournament_score
                (cond
                    ((> (get_bot_score a_values) (get_player_score a_values))
                        (get_player_tournament_score a_values)
                    )
                    ((= (get_bot_score a_values) (get_player_score a_values))
                        (+ (get_player_tournament_score a_values) 1)
                    )
                    ((< (get_bot_score a_values) (get_player_score a_values))
                        (+ (get_player_tournament_score a_values) 1)
                    )
                    (t "ERROR")
                )
            )
            (m_values
                (list
                    (list
                        NIL
                        NIL
                        NIL
                        0
                        m_bot_tournament_score
                    )
                    (list
                        NIL
                        NIL
                        NIL
                        0
                        m_player_tournament_score
                    )
                    
                )
            )
        )
        
        m_values
    )
)
;(update_tournament_score)
;
(defun declare_round_winner (a_values)
    (cond
        ((> (get_bot_score a_values) (get_player_score a_values))
            (print "WINNER: BOT")
            a_values
        )
        ((< (get_bot_score a_values) (get_player_score a_values))
            (print "WINNER: PLAYER")
            a_values
        )
        ((= (get_bot_score a_values) (get_player_score a_values))
            (print "WINNER: DRAW")
            a_values
        )
        (t "ERROR")
    )
)
;(declare_round_winner)
;
(defun turn (a_values)
    (print "turn")
    ;(print (get_player_hand a_values))
    (cond
        ((not(and (= (length (get_player_hand a_values)) 0) (= (length (get_bot_hand a_values)) 0)))
            (progn
                (cond
                    ((string= (get_first_player a_values) "HUMAN")
                        (progn
                            (print "HUMAN")
                            ;(display_board a_values)
                            (turn (player_play a_values))
                            
                        )
                    )
                    ((string= (get_first_player a_values) "COMPUTER")
                        (progn
                            (print "COMPUTER")
                            ;(display_board a_values)
                            (turn (bot_play a_values))
                        )
                        
                    )
                    (t "ERROR")
                )
            )
        )
        ((and (= (length (get_player_hand a_values)) 0) (= (length (get_bot_hand a_values)) 0))
            (progn
                ;a_values
                (cond
                    ((not(null (get_player_boneyard a_values)))
                        (turn(draw (update_round_score a_values)))
                    )
                    ((null (get_player_boneyard a_values))
                        (print a_values)
                        (update_tournament_score (declare_round_winner (update_round_score a_values)))
                    )
                    (t "ERROR")
                
                )
                
            )
        )
        (t "ERROR")
    )
    
)
;(turn)
;
(defun read_from_file ()
    (print "serialization file")
    (let(
            (m_values (read))
        )
        m_values
    )
)
;(read_from_file)
;
(defun declare_tournament_winner (a_values)
    (cond
        ((> (get_bot_tournament_score a_values) (get_player_tournament_score a_values))
            (print "WINNER: BOT")
            a_values
        )
        ((< (get_bot_tournament_score a_values) (get_player_tournament_score a_values))
            (print "WINNER: PLAYER")
            a_values
        )
        ((= (get_bot_tournament_score a_values) (get_player_tournament_score a_values))
            (print "WINNER: DRAW")
            a_values
        )
        (t "ERROR")
    )
)
;(declare_tournament_winner)
;
(defun tournament (a_values)
    (print "tournament")
    (print "do you want to play another tournament? (1 = yes, 0 = no)")
    (let
        (
            (ans (read))
        )
        (cond
            ((= ans 1)
                (progn
                    (print "continue to next tournament")
                    (turn
                        (draw
                            (check_first
                                (set_stacks
                                   (shuffle
                                        (generate_values_cont a_values)
                                    ) 
                                )
                                
                            )
                        )
                    )
                )
            )
            ((= ans 0)
                (display_board a_values)
                (declare_tournament_winner a_values)
            )
        )
    )
)
;(tournament)
;
(defun game (x)
    (cond 
        ((= x 0) 
            (print "start new tournament")
            (tournament
                (turn
                    (draw
                        (check_first
                            (set_stacks
                               (shuffle
                                    (generate_values)
                                ) 
                            )
                            
                        )
                    )
                )
            )
            
            
        )
        ((= x 1) 
            (print "resume old tournament")
            (tournament
                (turn
                    (draw
                        (check_first
                            (set_stacks
                                (shuffle
                                    (read_from_file)
                                )
                            )
                        )
                        
                    )
                )     
            )
                  
        )
        (t "wrong input. Validate")
    )
)
;(game)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ask user for input
(format nil "0 : Start New Tournament ~% 1 : Resume Old Tournament")
(game (read))
